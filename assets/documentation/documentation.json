{
    "pipes": [
        {
            "name": "CodeSamplePipe",
            "id": "pipe-CodeSamplePipe-89fb1be73ff33f8a5a1493a819334c70",
            "file": "projects/ng-documentation/src/lib/core/code-sample/code-sample.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [
                {
                    "name": "codeSamples",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "sampleId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "sampleId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "codeSample",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { ChangeDetectorRef, Pipe, PipeTransform } from '@angular/core';\nimport { DocumentationService } from '../documentation.service';\n\n@Pipe({\n  name: 'codeSample',\n  pure: false\n})\nexport class CodeSamplePipe implements PipeTransform {\n  codeSamples: {[sampleId: string]: string} = {};\n\n  constructor(private http: HttpClient, private changeDetectorRef: ChangeDetectorRef) {\n    this.http.get('assets/examples.json')\n      .subscribe(c => {\n        this.codeSamples = c as any;\n        this.changeDetectorRef.markForCheck();\n      });\n  }\n\n  transform(sampleId: string): any {\n    const key = Object.keys(this.codeSamples).find(k => k.includes(sampleId));\n    return this.codeSamples[key];\n  }\n\n}\n\n@Pipe({\n  name: 'componentDescription',\n  pure: false\n})\nexport class ComponentDescriptionPipe implements PipeTransform {\n  constructor(\n    private documentationService: DocumentationService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.documentationService.documentation$.subscribe(() => {\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  transform(name: string, type: 'directives' | 'components'): string {\n    const comp = this.documentationService.getComponentDocumentation(name, type);\n    if (comp) {\n      return comp.description;\n    } else {\n      return 'Loading';\n    }\n  }\n}\n"
        },
        {
            "name": "ComponentDescriptionPipe",
            "id": "pipe-ComponentDescriptionPipe-89fb1be73ff33f8a5a1493a819334c70",
            "file": "projects/ng-documentation/src/lib/core/code-sample/code-sample.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "\"directives\" | \"components\""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"directives\" | \"components\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "componentDescription",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { ChangeDetectorRef, Pipe, PipeTransform } from '@angular/core';\nimport { DocumentationService } from '../documentation.service';\n\n@Pipe({\n  name: 'codeSample',\n  pure: false\n})\nexport class CodeSamplePipe implements PipeTransform {\n  codeSamples: {[sampleId: string]: string} = {};\n\n  constructor(private http: HttpClient, private changeDetectorRef: ChangeDetectorRef) {\n    this.http.get('assets/examples.json')\n      .subscribe(c => {\n        this.codeSamples = c as any;\n        this.changeDetectorRef.markForCheck();\n      });\n  }\n\n  transform(sampleId: string): any {\n    const key = Object.keys(this.codeSamples).find(k => k.includes(sampleId));\n    return this.codeSamples[key];\n  }\n\n}\n\n@Pipe({\n  name: 'componentDescription',\n  pure: false\n})\nexport class ComponentDescriptionPipe implements PipeTransform {\n  constructor(\n    private documentationService: DocumentationService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.documentationService.documentation$.subscribe(() => {\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  transform(name: string, type: 'directives' | 'components'): string {\n    const comp = this.documentationService.getComponentDocumentation(name, type);\n    if (comp) {\n      return comp.description;\n    } else {\n      return 'Loading';\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ComponentDocumentation",
            "id": "interface-ComponentDocumentation-72d2e401d7441f6b7e0e07c06200e190",
            "file": "projects/ng-documentation/src/lib/core/documentation.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DOCUMENTATION_PATH } from '../documentation.token';\n\nexport interface InputType {\n    name: string;\n    description: string;\n    type: string;\n}\n\nexport interface OutputType {\n    name: string;\n    description: string;\n    type: string;\n    defaultValue: string;\n}\n\nexport interface MethodType {\n    name: string;\n    returnType: string;\n}\n\nexport interface ComponentDocumentation {\n    name: string;\n    selector: string;\n    description: string;\n    inputsClass: Array<InputType>;\n    outputsClass: Array<OutputType>;\n    methodsClass: Array<MethodType>;\n    accessors: {[id: string]: {\n        name: string\n        getSignature: {\n            returnType: string\n        }\n    }};\n}\n\nexport interface Documentation {\n    directives: Array<ComponentDocumentation>;\n    components: Array<ComponentDocumentation>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentationService {\n    private documentationSubject = new BehaviorSubject<Documentation>(undefined);\n\n    get documentation() {\n        return this.documentationSubject.value;\n    }\n\n    get documentation$() {\n        return this.documentationSubject.asObservable();\n    }\n\n    constructor(\n        private http: HttpClient,\n        @Optional() @Inject(DOCUMENTATION_PATH) documentationPath\n    ) {\n        this.http.get(documentationPath ||Â 'assets/documentation/documentation.json')\n        .subscribe((c: any) => {\n          this.documentationSubject.next(c);\n        });\n    }\n\n    getComponentDocumentation$(name: string, type: keyof Documentation) {\n        return this.documentationSubject.pipe(\n            map(documentation => {\n                if (!documentation) {\n                    return undefined;\n                } else {\n                    return documentation[type].find(d => d.name === name);\n                }\n            })\n        );\n    }\n\n    getComponentDocumentation(name: string, type: keyof Documentation) {\n        if (!this.documentation) {\n            return undefined;\n        } else {\n            const result = this.documentation[type].find(d => d.name === name);\n            if (result) {\n                return result;\n            }\n            throw new Error('Not found: ' + name);\n        }\n    }\n\n    getInputType(options: {\n        componentId: string\n        componentType: keyof Documentation\n        input: InputType\n    }): Observable<string> {\n        return this.getComponentDocumentation$(options.componentId, options.componentType)\n            .pipe(map(d => {\n                const defaultResult = options.input.type;\n                if (!d.accessors) {\n                    return defaultResult;\n                }\n                const acc = d.accessors[options.input.name];\n                if (acc) {\n                    return acc.getSignature.returnType;\n                } else {\n                    return defaultResult;\n                }\n            }));\n    }\n}\n",
            "properties": [
                {
                    "name": "accessors",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inputsClass",
                    "type": "Array<InputType>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "methodsClass",
                    "type": "Array<MethodType>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "outputsClass",
                    "type": "Array<OutputType>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selector",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ComponentPage",
            "id": "interface-ComponentPage-83b7dda0328421b00287eadc49c09e8b",
            "file": "projects/ng-documentation/src/lib/routes.token.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Type } from '@angular/core';\n\nexport interface ComponentPageMap {\n  [path: string]: ComponentPage;\n}\n\nexport type ComponentPages = Array<ComponentPage & { path: string }>;\n\nexport interface ComponentPage {\n  title: string;\n  component: Type<any>;\n}\n\nexport const COMPONENT_PAGES = new InjectionToken<ComponentPages>('COMPONENT_PAGES');\n",
            "properties": [
                {
                    "name": "component",
                    "type": "Type<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ComponentPageMap",
            "id": "interface-ComponentPageMap-83b7dda0328421b00287eadc49c09e8b",
            "file": "projects/ng-documentation/src/lib/routes.token.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Type } from '@angular/core';\n\nexport interface ComponentPageMap {\n  [path: string]: ComponentPage;\n}\n\nexport type ComponentPages = Array<ComponentPage & { path: string }>;\n\nexport interface ComponentPage {\n  title: string;\n  component: Type<any>;\n}\n\nexport const COMPONENT_PAGES = new InjectionToken<ComponentPages>('COMPONENT_PAGES');\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-83b7dda0328421b00287eadc49c09e8b",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "returnType": "ComponentPage",
                    "line": 3
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "Documentation",
            "id": "interface-Documentation-72d2e401d7441f6b7e0e07c06200e190",
            "file": "projects/ng-documentation/src/lib/core/documentation.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DOCUMENTATION_PATH } from '../documentation.token';\n\nexport interface InputType {\n    name: string;\n    description: string;\n    type: string;\n}\n\nexport interface OutputType {\n    name: string;\n    description: string;\n    type: string;\n    defaultValue: string;\n}\n\nexport interface MethodType {\n    name: string;\n    returnType: string;\n}\n\nexport interface ComponentDocumentation {\n    name: string;\n    selector: string;\n    description: string;\n    inputsClass: Array<InputType>;\n    outputsClass: Array<OutputType>;\n    methodsClass: Array<MethodType>;\n    accessors: {[id: string]: {\n        name: string\n        getSignature: {\n            returnType: string\n        }\n    }};\n}\n\nexport interface Documentation {\n    directives: Array<ComponentDocumentation>;\n    components: Array<ComponentDocumentation>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentationService {\n    private documentationSubject = new BehaviorSubject<Documentation>(undefined);\n\n    get documentation() {\n        return this.documentationSubject.value;\n    }\n\n    get documentation$() {\n        return this.documentationSubject.asObservable();\n    }\n\n    constructor(\n        private http: HttpClient,\n        @Optional() @Inject(DOCUMENTATION_PATH) documentationPath\n    ) {\n        this.http.get(documentationPath ||Â 'assets/documentation/documentation.json')\n        .subscribe((c: any) => {\n          this.documentationSubject.next(c);\n        });\n    }\n\n    getComponentDocumentation$(name: string, type: keyof Documentation) {\n        return this.documentationSubject.pipe(\n            map(documentation => {\n                if (!documentation) {\n                    return undefined;\n                } else {\n                    return documentation[type].find(d => d.name === name);\n                }\n            })\n        );\n    }\n\n    getComponentDocumentation(name: string, type: keyof Documentation) {\n        if (!this.documentation) {\n            return undefined;\n        } else {\n            const result = this.documentation[type].find(d => d.name === name);\n            if (result) {\n                return result;\n            }\n            throw new Error('Not found: ' + name);\n        }\n    }\n\n    getInputType(options: {\n        componentId: string\n        componentType: keyof Documentation\n        input: InputType\n    }): Observable<string> {\n        return this.getComponentDocumentation$(options.componentId, options.componentType)\n            .pipe(map(d => {\n                const defaultResult = options.input.type;\n                if (!d.accessors) {\n                    return defaultResult;\n                }\n                const acc = d.accessors[options.input.name];\n                if (acc) {\n                    return acc.getSignature.returnType;\n                } else {\n                    return defaultResult;\n                }\n            }));\n    }\n}\n",
            "properties": [
                {
                    "name": "components",
                    "type": "Array<ComponentDocumentation>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "directives",
                    "type": "Array<ComponentDocumentation>",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "InputType",
            "id": "interface-InputType-72d2e401d7441f6b7e0e07c06200e190",
            "file": "projects/ng-documentation/src/lib/core/documentation.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DOCUMENTATION_PATH } from '../documentation.token';\n\nexport interface InputType {\n    name: string;\n    description: string;\n    type: string;\n}\n\nexport interface OutputType {\n    name: string;\n    description: string;\n    type: string;\n    defaultValue: string;\n}\n\nexport interface MethodType {\n    name: string;\n    returnType: string;\n}\n\nexport interface ComponentDocumentation {\n    name: string;\n    selector: string;\n    description: string;\n    inputsClass: Array<InputType>;\n    outputsClass: Array<OutputType>;\n    methodsClass: Array<MethodType>;\n    accessors: {[id: string]: {\n        name: string\n        getSignature: {\n            returnType: string\n        }\n    }};\n}\n\nexport interface Documentation {\n    directives: Array<ComponentDocumentation>;\n    components: Array<ComponentDocumentation>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentationService {\n    private documentationSubject = new BehaviorSubject<Documentation>(undefined);\n\n    get documentation() {\n        return this.documentationSubject.value;\n    }\n\n    get documentation$() {\n        return this.documentationSubject.asObservable();\n    }\n\n    constructor(\n        private http: HttpClient,\n        @Optional() @Inject(DOCUMENTATION_PATH) documentationPath\n    ) {\n        this.http.get(documentationPath ||Â 'assets/documentation/documentation.json')\n        .subscribe((c: any) => {\n          this.documentationSubject.next(c);\n        });\n    }\n\n    getComponentDocumentation$(name: string, type: keyof Documentation) {\n        return this.documentationSubject.pipe(\n            map(documentation => {\n                if (!documentation) {\n                    return undefined;\n                } else {\n                    return documentation[type].find(d => d.name === name);\n                }\n            })\n        );\n    }\n\n    getComponentDocumentation(name: string, type: keyof Documentation) {\n        if (!this.documentation) {\n            return undefined;\n        } else {\n            const result = this.documentation[type].find(d => d.name === name);\n            if (result) {\n                return result;\n            }\n            throw new Error('Not found: ' + name);\n        }\n    }\n\n    getInputType(options: {\n        componentId: string\n        componentType: keyof Documentation\n        input: InputType\n    }): Observable<string> {\n        return this.getComponentDocumentation$(options.componentId, options.componentType)\n            .pipe(map(d => {\n                const defaultResult = options.input.type;\n                if (!d.accessors) {\n                    return defaultResult;\n                }\n                const acc = d.accessors[options.input.name];\n                if (acc) {\n                    return acc.getSignature.returnType;\n                } else {\n                    return defaultResult;\n                }\n            }));\n    }\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MethodType",
            "id": "interface-MethodType-72d2e401d7441f6b7e0e07c06200e190",
            "file": "projects/ng-documentation/src/lib/core/documentation.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DOCUMENTATION_PATH } from '../documentation.token';\n\nexport interface InputType {\n    name: string;\n    description: string;\n    type: string;\n}\n\nexport interface OutputType {\n    name: string;\n    description: string;\n    type: string;\n    defaultValue: string;\n}\n\nexport interface MethodType {\n    name: string;\n    returnType: string;\n}\n\nexport interface ComponentDocumentation {\n    name: string;\n    selector: string;\n    description: string;\n    inputsClass: Array<InputType>;\n    outputsClass: Array<OutputType>;\n    methodsClass: Array<MethodType>;\n    accessors: {[id: string]: {\n        name: string\n        getSignature: {\n            returnType: string\n        }\n    }};\n}\n\nexport interface Documentation {\n    directives: Array<ComponentDocumentation>;\n    components: Array<ComponentDocumentation>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentationService {\n    private documentationSubject = new BehaviorSubject<Documentation>(undefined);\n\n    get documentation() {\n        return this.documentationSubject.value;\n    }\n\n    get documentation$() {\n        return this.documentationSubject.asObservable();\n    }\n\n    constructor(\n        private http: HttpClient,\n        @Optional() @Inject(DOCUMENTATION_PATH) documentationPath\n    ) {\n        this.http.get(documentationPath ||Â 'assets/documentation/documentation.json')\n        .subscribe((c: any) => {\n          this.documentationSubject.next(c);\n        });\n    }\n\n    getComponentDocumentation$(name: string, type: keyof Documentation) {\n        return this.documentationSubject.pipe(\n            map(documentation => {\n                if (!documentation) {\n                    return undefined;\n                } else {\n                    return documentation[type].find(d => d.name === name);\n                }\n            })\n        );\n    }\n\n    getComponentDocumentation(name: string, type: keyof Documentation) {\n        if (!this.documentation) {\n            return undefined;\n        } else {\n            const result = this.documentation[type].find(d => d.name === name);\n            if (result) {\n                return result;\n            }\n            throw new Error('Not found: ' + name);\n        }\n    }\n\n    getInputType(options: {\n        componentId: string\n        componentType: keyof Documentation\n        input: InputType\n    }): Observable<string> {\n        return this.getComponentDocumentation$(options.componentId, options.componentType)\n            .pipe(map(d => {\n                const defaultResult = options.input.type;\n                if (!d.accessors) {\n                    return defaultResult;\n                }\n                const acc = d.accessors[options.input.name];\n                if (acc) {\n                    return acc.getSignature.returnType;\n                } else {\n                    return defaultResult;\n                }\n            }));\n    }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "returnType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "OutputType",
            "id": "interface-OutputType-72d2e401d7441f6b7e0e07c06200e190",
            "file": "projects/ng-documentation/src/lib/core/documentation.service.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DOCUMENTATION_PATH } from '../documentation.token';\n\nexport interface InputType {\n    name: string;\n    description: string;\n    type: string;\n}\n\nexport interface OutputType {\n    name: string;\n    description: string;\n    type: string;\n    defaultValue: string;\n}\n\nexport interface MethodType {\n    name: string;\n    returnType: string;\n}\n\nexport interface ComponentDocumentation {\n    name: string;\n    selector: string;\n    description: string;\n    inputsClass: Array<InputType>;\n    outputsClass: Array<OutputType>;\n    methodsClass: Array<MethodType>;\n    accessors: {[id: string]: {\n        name: string\n        getSignature: {\n            returnType: string\n        }\n    }};\n}\n\nexport interface Documentation {\n    directives: Array<ComponentDocumentation>;\n    components: Array<ComponentDocumentation>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentationService {\n    private documentationSubject = new BehaviorSubject<Documentation>(undefined);\n\n    get documentation() {\n        return this.documentationSubject.value;\n    }\n\n    get documentation$() {\n        return this.documentationSubject.asObservable();\n    }\n\n    constructor(\n        private http: HttpClient,\n        @Optional() @Inject(DOCUMENTATION_PATH) documentationPath\n    ) {\n        this.http.get(documentationPath ||Â 'assets/documentation/documentation.json')\n        .subscribe((c: any) => {\n          this.documentationSubject.next(c);\n        });\n    }\n\n    getComponentDocumentation$(name: string, type: keyof Documentation) {\n        return this.documentationSubject.pipe(\n            map(documentation => {\n                if (!documentation) {\n                    return undefined;\n                } else {\n                    return documentation[type].find(d => d.name === name);\n                }\n            })\n        );\n    }\n\n    getComponentDocumentation(name: string, type: keyof Documentation) {\n        if (!this.documentation) {\n            return undefined;\n        } else {\n            const result = this.documentation[type].find(d => d.name === name);\n            if (result) {\n                return result;\n            }\n            throw new Error('Not found: ' + name);\n        }\n    }\n\n    getInputType(options: {\n        componentId: string\n        componentType: keyof Documentation\n        input: InputType\n    }): Observable<string> {\n        return this.getComponentDocumentation$(options.componentId, options.componentType)\n            .pipe(map(d => {\n                const defaultResult = options.input.type;\n                if (!d.accessors) {\n                    return defaultResult;\n                }\n                const acc = d.accessors[options.input.name];\n                if (acc) {\n                    return acc.getSignature.returnType;\n                } else {\n                    return defaultResult;\n                }\n            }));\n    }\n}\n",
            "properties": [
                {
                    "name": "defaultValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DocumentationService",
            "id": "injectable-DocumentationService-72d2e401d7441f6b7e0e07c06200e190",
            "file": "projects/ng-documentation/src/lib/core/documentation.service.ts",
            "properties": [
                {
                    "name": "documentationSubject",
                    "defaultValue": "new BehaviorSubject<Documentation>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getComponentDocumentation",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentDocumentation$",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInputType",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DOCUMENTATION_PATH } from '../documentation.token';\n\nexport interface InputType {\n    name: string;\n    description: string;\n    type: string;\n}\n\nexport interface OutputType {\n    name: string;\n    description: string;\n    type: string;\n    defaultValue: string;\n}\n\nexport interface MethodType {\n    name: string;\n    returnType: string;\n}\n\nexport interface ComponentDocumentation {\n    name: string;\n    selector: string;\n    description: string;\n    inputsClass: Array<InputType>;\n    outputsClass: Array<OutputType>;\n    methodsClass: Array<MethodType>;\n    accessors: {[id: string]: {\n        name: string\n        getSignature: {\n            returnType: string\n        }\n    }};\n}\n\nexport interface Documentation {\n    directives: Array<ComponentDocumentation>;\n    components: Array<ComponentDocumentation>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentationService {\n    private documentationSubject = new BehaviorSubject<Documentation>(undefined);\n\n    get documentation() {\n        return this.documentationSubject.value;\n    }\n\n    get documentation$() {\n        return this.documentationSubject.asObservable();\n    }\n\n    constructor(\n        private http: HttpClient,\n        @Optional() @Inject(DOCUMENTATION_PATH) documentationPath\n    ) {\n        this.http.get(documentationPath ||Â 'assets/documentation/documentation.json')\n        .subscribe((c: any) => {\n          this.documentationSubject.next(c);\n        });\n    }\n\n    getComponentDocumentation$(name: string, type: keyof Documentation) {\n        return this.documentationSubject.pipe(\n            map(documentation => {\n                if (!documentation) {\n                    return undefined;\n                } else {\n                    return documentation[type].find(d => d.name === name);\n                }\n            })\n        );\n    }\n\n    getComponentDocumentation(name: string, type: keyof Documentation) {\n        if (!this.documentation) {\n            return undefined;\n        } else {\n            const result = this.documentation[type].find(d => d.name === name);\n            if (result) {\n                return result;\n            }\n            throw new Error('Not found: ' + name);\n        }\n    }\n\n    getInputType(options: {\n        componentId: string\n        componentType: keyof Documentation\n        input: InputType\n    }): Observable<string> {\n        return this.getComponentDocumentation$(options.componentId, options.componentType)\n            .pipe(map(d => {\n                const defaultResult = options.input.type;\n                if (!d.accessors) {\n                    return defaultResult;\n                }\n                const acc = d.accessors[options.input.name];\n                if (acc) {\n                    return acc.getSignature.returnType;\n                } else {\n                    return defaultResult;\n                }\n            }));\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "documentationPath",
                        "type": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentationPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "documentation": {
                    "name": "documentation",
                    "getSignature": {
                        "name": "documentation",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "documentation$": {
                    "name": "documentation$",
                    "getSignature": {
                        "name": "documentation$",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "AnchorContainerDirective",
            "id": "directive-AnchorContainerDirective-7d89b1daf5e4c2df9f2df5b4b08ab813",
            "file": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewChecked, Component, Directive, ElementRef, Input, TemplateRef, OnChanges } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Component that displays a component's or a directive's information: an overview, examples and API.\n */\n@Component({\n  selector: 'docs-component-documentation',\n  templateUrl: './component-documentation.component.html',\n  styleUrls: ['./component-documentation.component.sass']\n})\nexport class ComponentDocumentationComponent implements OnChanges {\n  /**\n   * The component class name.\n   */\n  @Input() componentId: string;\n  /**\n   * The component type.\n   */\n  @Input() componentType: 'directives' | 'components';\n  /**\n   * A title that will be displayed.\n   */\n  @Input() componentTitle: string;\n  /**\n   * @ignore\n   */\n  @Input() disableRoutedNavigation = false;\n\n  examples: ComponentExampleDirective[] = [];\n\n  tab$: Observable<'overview' | 'examples' | 'api'>;\n  isOverview$: Observable<boolean>;\n  isExamples$: Observable<boolean>;\n  isApi$: Observable<boolean>;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges() {\n    this.tab$ = this.disableRoutedNavigation ? of('overview') : this.route.queryParams.pipe(map(p => p.tab || 'overview'));\n    this.updateIsObservables();\n  }\n\n  /**\n   * @ignore\n   */\n  registerExample(example: ComponentExampleDirective) {\n    this.examples.push(example);\n  }\n\n  /**\n   * @ignore\n   */\n  select(tab: 'overview' | 'examples' | 'api') {\n    if (this.disableRoutedNavigation) {\n      this.tab$ = of(tab);\n      this.updateIsObservables();\n    } else {\n      this.router.navigate(['.'], {\n        queryParamsHandling: 'merge',\n        queryParams: {\n          tab\n        },\n        relativeTo: this.route,\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private updateIsObservables() {\n    this.isOverview$ = this.tab$.pipe(map(v => v === 'overview'));\n    this.isExamples$ = this.tab$.pipe(map(v => v === 'examples'));\n    this.isApi$ = this.tab$.pipe(map(v => v === 'api'));\n  }\n}\n\n@Directive({\n  selector: '[docsAnchorContainer]'\n})\nexport class AnchorContainerDirective implements AfterViewChecked {\n  @Input() docsAnchorContainer: string;\n  private anchors: AnchorDirective[] = [];\n  private currentAnchor: string;\n\n  constructor(private elementRef: ElementRef) {}\n\n  registerAnchor(anchor: AnchorDirective) {\n    this.anchors.push(anchor);\n  }\n\n  ngAfterViewChecked() {\n    if (this.currentAnchor === this.docsAnchorContainer) {\n      return;\n    }\n\n    this.currentAnchor = this.docsAnchorContainer;\n    const element = this.elementRef.nativeElement as HTMLElement;\n    const anchor = (this.anchors.find(a => a.docsAnchor === this.docsAnchorContainer).elementRef.nativeElement) as HTMLElement;\n\n    element.scrollTop = anchor.offsetTop - element.offsetTop - 15;\n  }\n}\n\n@Directive({\n  selector: '[docsAnchor]'\n})\nexport class AnchorDirective {\n  @Input() docsAnchor: string;\n\n  constructor(\n    private container: AnchorContainerDirective,\n    public elementRef: ElementRef\n  ) {\n    this.container.registerAnchor(this);\n  }\n}\n\n@Directive({\n  selector: '[docsComponentExample]'\n})\nexport class ComponentExampleDirective {\n  @Input() docsComponentExample: string;\n\n  constructor(\n    private documentation: ComponentDocumentationComponent,\n    public template: TemplateRef<any>\n  ) {\n    this.documentation.registerExample(this);\n  }\n}\n",
            "selector": "[docsAnchorContainer]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "docsAnchorContainer",
                    "line": 92,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "anchors",
                    "defaultValue": "[]",
                    "type": "AnchorDirective[]",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentAnchor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "registerAnchor",
                    "args": [
                        {
                            "name": "anchor",
                            "type": "AnchorDirective"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "anchor",
                            "type": "AnchorDirective",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewChecked"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AnchorDirective",
            "id": "directive-AnchorDirective-7d89b1daf5e4c2df9f2df5b4b08ab813",
            "file": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewChecked, Component, Directive, ElementRef, Input, TemplateRef, OnChanges } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Component that displays a component's or a directive's information: an overview, examples and API.\n */\n@Component({\n  selector: 'docs-component-documentation',\n  templateUrl: './component-documentation.component.html',\n  styleUrls: ['./component-documentation.component.sass']\n})\nexport class ComponentDocumentationComponent implements OnChanges {\n  /**\n   * The component class name.\n   */\n  @Input() componentId: string;\n  /**\n   * The component type.\n   */\n  @Input() componentType: 'directives' | 'components';\n  /**\n   * A title that will be displayed.\n   */\n  @Input() componentTitle: string;\n  /**\n   * @ignore\n   */\n  @Input() disableRoutedNavigation = false;\n\n  examples: ComponentExampleDirective[] = [];\n\n  tab$: Observable<'overview' | 'examples' | 'api'>;\n  isOverview$: Observable<boolean>;\n  isExamples$: Observable<boolean>;\n  isApi$: Observable<boolean>;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges() {\n    this.tab$ = this.disableRoutedNavigation ? of('overview') : this.route.queryParams.pipe(map(p => p.tab || 'overview'));\n    this.updateIsObservables();\n  }\n\n  /**\n   * @ignore\n   */\n  registerExample(example: ComponentExampleDirective) {\n    this.examples.push(example);\n  }\n\n  /**\n   * @ignore\n   */\n  select(tab: 'overview' | 'examples' | 'api') {\n    if (this.disableRoutedNavigation) {\n      this.tab$ = of(tab);\n      this.updateIsObservables();\n    } else {\n      this.router.navigate(['.'], {\n        queryParamsHandling: 'merge',\n        queryParams: {\n          tab\n        },\n        relativeTo: this.route,\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private updateIsObservables() {\n    this.isOverview$ = this.tab$.pipe(map(v => v === 'overview'));\n    this.isExamples$ = this.tab$.pipe(map(v => v === 'examples'));\n    this.isApi$ = this.tab$.pipe(map(v => v === 'api'));\n  }\n}\n\n@Directive({\n  selector: '[docsAnchorContainer]'\n})\nexport class AnchorContainerDirective implements AfterViewChecked {\n  @Input() docsAnchorContainer: string;\n  private anchors: AnchorDirective[] = [];\n  private currentAnchor: string;\n\n  constructor(private elementRef: ElementRef) {}\n\n  registerAnchor(anchor: AnchorDirective) {\n    this.anchors.push(anchor);\n  }\n\n  ngAfterViewChecked() {\n    if (this.currentAnchor === this.docsAnchorContainer) {\n      return;\n    }\n\n    this.currentAnchor = this.docsAnchorContainer;\n    const element = this.elementRef.nativeElement as HTMLElement;\n    const anchor = (this.anchors.find(a => a.docsAnchor === this.docsAnchorContainer).elementRef.nativeElement) as HTMLElement;\n\n    element.scrollTop = anchor.offsetTop - element.offsetTop - 15;\n  }\n}\n\n@Directive({\n  selector: '[docsAnchor]'\n})\nexport class AnchorDirective {\n  @Input() docsAnchor: string;\n\n  constructor(\n    private container: AnchorContainerDirective,\n    public elementRef: ElementRef\n  ) {\n    this.container.registerAnchor(this);\n  }\n}\n\n@Directive({\n  selector: '[docsComponentExample]'\n})\nexport class ComponentExampleDirective {\n  @Input() docsComponentExample: string;\n\n  constructor(\n    private documentation: ComponentDocumentationComponent,\n    public template: TemplateRef<any>\n  ) {\n    this.documentation.registerExample(this);\n  }\n}\n",
            "selector": "[docsAnchor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "docsAnchor",
                    "line": 119,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "container",
                        "type": "AnchorContainerDirective"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 119,
                "jsdoctags": [
                    {
                        "name": "container",
                        "type": "AnchorContainerDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BrandHeaderDirective",
            "id": "directive-BrandHeaderDirective-18937147368c44436dce4672874b23bc",
            "file": "projects/ng-documentation/src/lib/core/directives/brand-header.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, OnInit, TemplateRef } from '@angular/core';\nimport { DocsComponent } from '../../docs/docs.component';\n\n@Directive({\n  selector: '[docsBrandHeader]'\n})\nexport class BrandHeaderDirective implements OnInit {\n\n  constructor(\n    private docs: DocsComponent,\n    private templateRef: TemplateRef<any>\n  ) { }\n\n  ngOnInit() {\n    this.docs.brandHeaderTemplate = this.templateRef;\n  }\n}\n",
            "selector": "[docsBrandHeader]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "docs",
                        "type": "DocsComponent"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "docs",
                        "type": "DocsComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ComponentExampleDirective",
            "id": "directive-ComponentExampleDirective-7d89b1daf5e4c2df9f2df5b4b08ab813",
            "file": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewChecked, Component, Directive, ElementRef, Input, TemplateRef, OnChanges } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Component that displays a component's or a directive's information: an overview, examples and API.\n */\n@Component({\n  selector: 'docs-component-documentation',\n  templateUrl: './component-documentation.component.html',\n  styleUrls: ['./component-documentation.component.sass']\n})\nexport class ComponentDocumentationComponent implements OnChanges {\n  /**\n   * The component class name.\n   */\n  @Input() componentId: string;\n  /**\n   * The component type.\n   */\n  @Input() componentType: 'directives' | 'components';\n  /**\n   * A title that will be displayed.\n   */\n  @Input() componentTitle: string;\n  /**\n   * @ignore\n   */\n  @Input() disableRoutedNavigation = false;\n\n  examples: ComponentExampleDirective[] = [];\n\n  tab$: Observable<'overview' | 'examples' | 'api'>;\n  isOverview$: Observable<boolean>;\n  isExamples$: Observable<boolean>;\n  isApi$: Observable<boolean>;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges() {\n    this.tab$ = this.disableRoutedNavigation ? of('overview') : this.route.queryParams.pipe(map(p => p.tab || 'overview'));\n    this.updateIsObservables();\n  }\n\n  /**\n   * @ignore\n   */\n  registerExample(example: ComponentExampleDirective) {\n    this.examples.push(example);\n  }\n\n  /**\n   * @ignore\n   */\n  select(tab: 'overview' | 'examples' | 'api') {\n    if (this.disableRoutedNavigation) {\n      this.tab$ = of(tab);\n      this.updateIsObservables();\n    } else {\n      this.router.navigate(['.'], {\n        queryParamsHandling: 'merge',\n        queryParams: {\n          tab\n        },\n        relativeTo: this.route,\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private updateIsObservables() {\n    this.isOverview$ = this.tab$.pipe(map(v => v === 'overview'));\n    this.isExamples$ = this.tab$.pipe(map(v => v === 'examples'));\n    this.isApi$ = this.tab$.pipe(map(v => v === 'api'));\n  }\n}\n\n@Directive({\n  selector: '[docsAnchorContainer]'\n})\nexport class AnchorContainerDirective implements AfterViewChecked {\n  @Input() docsAnchorContainer: string;\n  private anchors: AnchorDirective[] = [];\n  private currentAnchor: string;\n\n  constructor(private elementRef: ElementRef) {}\n\n  registerAnchor(anchor: AnchorDirective) {\n    this.anchors.push(anchor);\n  }\n\n  ngAfterViewChecked() {\n    if (this.currentAnchor === this.docsAnchorContainer) {\n      return;\n    }\n\n    this.currentAnchor = this.docsAnchorContainer;\n    const element = this.elementRef.nativeElement as HTMLElement;\n    const anchor = (this.anchors.find(a => a.docsAnchor === this.docsAnchorContainer).elementRef.nativeElement) as HTMLElement;\n\n    element.scrollTop = anchor.offsetTop - element.offsetTop - 15;\n  }\n}\n\n@Directive({\n  selector: '[docsAnchor]'\n})\nexport class AnchorDirective {\n  @Input() docsAnchor: string;\n\n  constructor(\n    private container: AnchorContainerDirective,\n    public elementRef: ElementRef\n  ) {\n    this.container.registerAnchor(this);\n  }\n}\n\n@Directive({\n  selector: '[docsComponentExample]'\n})\nexport class ComponentExampleDirective {\n  @Input() docsComponentExample: string;\n\n  constructor(\n    private documentation: ComponentDocumentationComponent,\n    public template: TemplateRef<any>\n  ) {\n    this.documentation.registerExample(this);\n  }\n}\n",
            "selector": "[docsComponentExample]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "docsComponentExample",
                    "line": 133,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "documentation",
                        "type": "ComponentDocumentationComponent"
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 133,
                "jsdoctags": [
                    {
                        "name": "documentation",
                        "type": "ComponentDocumentationComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabDirective",
            "id": "directive-TabDirective-9d8ea0492d4524eb529c287bf667aa17",
            "file": "projects/ng-documentation/src/lib/core/tabs/tabs.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Component, OnInit, Directive, OnDestroy, TemplateRef, Input } from '@angular/core';\n\n@Component({\n  selector: 'docs-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.sass']\n})\nexport class TabsComponent {\n  selectedTemplate: TemplateRef<any>;\n\n  tabs: { label: string, template: TemplateRef<any> }[] = [];\n}\n\n@Directive({\n  selector: '[docsTab]'\n})\nexport class TabDirective implements OnInit, OnDestroy {\n  @Input() docsTab: string;\n\n  constructor(private tabs: TabsComponent, private template: TemplateRef<any>) {}\n\n  ngOnInit() {\n    this.tabs.tabs.push({\n      label: this.docsTab,\n      template: this.template\n    });\n\n    if (!this.tabs.selectedTemplate) {\n      this.tabs.selectedTemplate = this.template;\n    }\n  }\n\n  ngOnDestroy() {\n    this.tabs.tabs = this.tabs.tabs.filter(t => t.template !== this.template);\n\n    if (this.tabs.selectedTemplate === this.template && this.tabs.tabs.length > 0) {\n      this.tabs.selectedTemplate = this.tabs.tabs[0].template;\n    }\n  }\n}\n",
            "selector": "[docsTab]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "docsTab",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tabs",
                        "type": "TabsComponent"
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "tabs",
                        "type": "TabsComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "CodeComponent",
            "id": "component-CodeComponent-525d7f258aecbee2c5be6d07b6055111",
            "file": "projects/ng-documentation/src/lib/core/code/code.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-code",
            "styleUrls": [
                "./code.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./code.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "path",
                    "description": "<p>Path or name of the file that you want to display.</p>\n",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "code",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'code'"
                        }
                    ]
                },
                {
                    "name": "copied",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "copiedTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "faCopy",
                    "defaultValue": "faCopy",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ElementRef, OnDestroy } from '@angular/core';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'docs-code',\n  templateUrl: './code.component.html',\n  styleUrls: ['./code.component.sass']\n})\nexport class CodeComponent implements OnDestroy {\n  /**\n   * Path or name of the file that you want to display.\n   */\n  @Input() path: string;\n  @ViewChild('code') code: ElementRef;\n  faCopy = faCopy;\n  copied = false;\n  copiedTimeout: any;\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy() {\n    clearTimeout(this.copiedTimeout);\n  }\n\n  /**\n   * @ignore\n   */\n  copy() {\n    this.copyToClipboard(this.code.nativeElement.innerText);\n    this.copied = true;\n    clearTimeout(this.copiedTimeout);\n    this.copiedTimeout = setTimeout(() => this.copied = false, 3000);\n  }\n\n  /**\n   * @ignore\n   */\n  private copyToClipboard(str: string) {\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  position: relative\n  display: block\n  overflow: auto\n\npre\n  margin: 0\n  padding: 0\n  height: 100%\n  overflow: auto\n  \n  code\n    margin: 0\n\n.source-actions\n  position: absolute\n  right: 0\n  top: 0\n  display: flex\n  flex-direction: column\n  align-items: flex-end\n  padding: 5px 15px\n",
                    "styleUrl": "./code.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<pre><code #code>{{ path | codeSample }}</code></pre>\n<div class=\"source-actions\">\n  <docs-copy-button [element]=\"code\"></docs-copy-button>\n</div>\n"
        },
        {
            "name": "CodeLineComponent",
            "id": "component-CodeLineComponent-c7f8a79971727d31563274f793b29aa4",
            "file": "projects/ng-documentation/src/lib/core/code-line/code-line.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-code-line",
            "styleUrls": [
                "./code-line.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./code-line.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "code",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'code'"
                        }
                    ]
                },
                {
                    "name": "copied",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "copiedTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "faCopy",
                    "defaultValue": "faCopy",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'docs-code-line',\n  templateUrl: './code-line.component.html',\n  styleUrls: ['./code-line.component.sass']\n})\nexport class CodeLineComponent implements OnDestroy {\n  @ViewChild('code') code: ElementRef;\n  faCopy = faCopy;\n  copied = false;\n  copiedTimeout: any;\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy() {\n    clearTimeout(this.copiedTimeout);\n  }\n\n  /**\n   * @ignore\n   */\n  copy() {\n    this.copyToClipboard(this.code.nativeElement.innerText);\n    this.copied = true;\n    clearTimeout(this.copiedTimeout);\n    this.copiedTimeout = setTimeout(() => this.copied = false, 3000);\n  }\n\n  /**\n   * @ignore\n   */\n  private copyToClipboard(str: string) {\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  display: block\n  margin: 5px 0\n  position: relative\n\ndocs-copy-button\n  position: absolute\n  right: 15px\n  top: 50%\n  transform: translateY(-50%)\n\n.code-container\n  display: flex\n  flex-direction: row\n  background: whitesmoke\n  align-items: center\n\npre\n  flex: 1 1\n  background: transparent\n  margin: 0\n\ncode\n  margin: 0\n\n",
                    "styleUrl": "./code-line.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"code-container\">\n  <pre><code #code><ng-content></ng-content></code></pre>\n</div>\n\n<docs-copy-button [element]=\"code\"></docs-copy-button>\n"
        },
        {
            "name": "ComponentApiComponent",
            "id": "component-ComponentApiComponent-177e03222d3f08b22ec9cecf9940c27e",
            "file": "projects/ng-documentation/src/lib/core/component-api/component-api.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-component-api",
            "styleUrls": [
                "./component-api.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./component-api.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentId",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "componentType",
                    "line": 16,
                    "type": "\"components\" | \"directives\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "documentation$",
                    "type": "Observable<ComponentDocumentation>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "hasInputs$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasMethods$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "hasOutputs$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "inputs$",
                    "type": "Observable<InputType[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "methods$",
                    "type": "Observable<MethodType[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "outputs$",
                    "type": "Observable<OutputType[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selector$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Displays the component API: inputs, outputs and methods.</p>\n",
            "rawdescription": "Displays the component API: inputs, outputs and methods.",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ComponentDocumentation, DocumentationService, InputType, MethodType, OutputType } from '../documentation.service';\n\n/**\n * Displays the component API: inputs, outputs and methods.\n */\n@Component({\n  selector: 'docs-component-api',\n  templateUrl: './component-api.component.html',\n  styleUrls: ['./component-api.component.sass']\n})\nexport class ComponentApiComponent implements OnChanges {\n  @Input() componentId: string;\n  @Input() componentType: 'components' | 'directives';\n\n  documentation$: Observable<ComponentDocumentation>;\n  inputs$: Observable<InputType[]>;\n  outputs$: Observable<OutputType[]>;\n  methods$: Observable<MethodType[]>;\n  selector$: Observable<string>;\n  hasOutputs$: Observable<boolean>;\n  hasInputs$: Observable<boolean>;\n  hasMethods$: Observable<boolean>;\n\n  constructor(\n    private documentation: DocumentationService\n  ) { }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges() {\n    this.documentation$ = this.documentation.getComponentDocumentation$(this.componentId, this.componentType);\n    this.selector$ = this.documentation$.pipe(map(d => d ? d.selector : ''));\n    this.inputs$ = this.documentation$\n      .pipe(\n        map(d => d ? d.inputsClass ||Â [] : []),\n        map(sortByName)\n      );\n    this.outputs$ = this.documentation$\n      .pipe(\n        map(d => d ? d.outputsClass ||Â [] : []),\n        map(sortByName)\n      );\n    this.methods$ = this.documentation$\n      .pipe(\n        map(d => d ? d.methodsClass ||Â [] : []),\n        map(sortByName)\n      );\n    this.hasOutputs$ = this.outputs$.pipe(map(a => a.length > 0));\n    this.hasInputs$ = this.inputs$.pipe(map(a => a.length > 0));\n    this.hasMethods$ = this.methods$.pipe(map(a => a.length > 0));\n  }\n\n  /**\n   * @ignore\n   */\n  getInputType(input: InputType): Observable<string> {\n    return this.documentation.getInputType({\n      componentId: this.componentId,\n      componentType: this.componentType,\n      input\n    });\n  }\n}\n\nfunction sortByName<T extends {name: string}>(arr: T[]): T[] {\n  const result = (arr ||Â []).slice(0);\n  result.sort((a, b) => {\n    return a.name.localeCompare(b.name);\n  });\n  return result;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/variables'\n\ntable\n    border-collapse: collapse\n    border: 1px solid $color-light-grey\n    border-radius: 1px\n    width: 100%\n\nthead\n    background: $color-light-grey\n\nth\n    text-align: left\n\nth, td\n    padding: 3px 20px 3px 3px\n\ntr\n    border-bottom: 1px solid $color-light-grey\n\n.name, .type\n    width: 30%\n\n.description\n    width: 40%\n",
                    "styleUrl": "./component-api.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "documentation",
                        "type": "DocumentationService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "documentation",
                        "type": "DocumentationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<h2>Selector: <code>{{selector$ | async}}</code></h2>\n\n<ng-template [ngIf]=\"hasInputs$ | async\">\n  <h3>Inputs</h3>\n\n  <table>\n    <thead>\n      <tr>\n        <th class=\"name\">Input</th>\n        <th class=\"type\">Type</th>\n        <th class=\"description\">Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-template ngFor [ngForOf]=\"inputs$ | async\" let-input>\n        <tr>\n          <td><code>{{input.name}}</code></td>\n          <td><code>{{getInputType(input) | async}}</code></td>\n          <td [innerHTML]=\"input.description\"></td>\n        </tr>\n      </ng-template>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template [ngIf]=\"hasOutputs$ | async\">\n  <h3>Outputs</h3>\n\n  <table>\n    <thead>\n      <tr>\n        <th class=\"name\">Output</th>\n        <th class=\"type\">Type</th>\n        <th class=\"description\">Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-template ngFor [ngForOf]=\"outputs$ | async\" let-output>\n        <tr>\n          <td><code>{{output.name}}</code></td>\n          <td><code>{{output.defaultValue}}</code></td>\n          <td [innerHTML]=\"output.description\"></td>\n        </tr>\n      </ng-template>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template [ngIf]=\"hasMethods$ | async\">\n  <h3>Methods</h3>\n\n  <table>\n    <thead>\n      <tr>\n        <th class=\"name\">Method</th>\n        <th class=\"description\">Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-template ngFor [ngForOf]=\"methods$ | async\" let-output>\n        <tr>\n          <td><code>{{output.name}}</code></td>\n          <td [innerHTML]=\"output.description\"></td>\n        </tr>\n      </ng-template>\n    </tbody>\n  </table>\n</ng-template>"
        },
        {
            "name": "ComponentDescriptionComponent",
            "id": "component-ComponentDescriptionComponent-f2ef9d8ce2bdfe3588213f4e877ad8cb",
            "file": "projects/ng-documentation/src/lib/core/component-description/component-description.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-component-description",
            "styleUrls": [
                "./component-description.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./component-description.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentId",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "componentType",
                    "line": 10,
                    "type": "\"components\" | \"directives\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'docs-component-description',\n  templateUrl: './component-description.component.html',\n  styleUrls: ['./component-description.component.sass'],\n})\nexport class ComponentDescriptionComponent {\n  @Input() componentId: string;\n  @Input() componentType: 'components' | 'directives';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./component-description.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<div [innerHTML]=\"componentId | componentDescription: componentType\"></div>"
        },
        {
            "name": "ComponentDocumentationComponent",
            "id": "component-ComponentDocumentationComponent-7d89b1daf5e4c2df9f2df5b4b08ab813",
            "file": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-component-documentation",
            "styleUrls": [
                "./component-documentation.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./component-documentation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentId",
                    "description": "<p>The component class name.</p>\n",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "componentTitle",
                    "description": "<p>A title that will be displayed.</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "componentType",
                    "description": "<p>The component type.</p>\n",
                    "line": 22,
                    "type": "\"directives\" | \"components\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "examples",
                    "defaultValue": "[]",
                    "type": "ComponentExampleDirective[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isApi$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isExamples$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isOverview$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tab$",
                    "type": "Observable<\"overview\" | \"examples\" | \"api\">",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component that displays a component&#39;s or a directive&#39;s information: an overview, examples and API.</p>\n",
            "rawdescription": "Component that displays a component's or a directive's information: an overview, examples and API.",
            "type": "component",
            "sourceCode": "import { AfterViewChecked, Component, Directive, ElementRef, Input, TemplateRef, OnChanges } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Component that displays a component's or a directive's information: an overview, examples and API.\n */\n@Component({\n  selector: 'docs-component-documentation',\n  templateUrl: './component-documentation.component.html',\n  styleUrls: ['./component-documentation.component.sass']\n})\nexport class ComponentDocumentationComponent implements OnChanges {\n  /**\n   * The component class name.\n   */\n  @Input() componentId: string;\n  /**\n   * The component type.\n   */\n  @Input() componentType: 'directives' | 'components';\n  /**\n   * A title that will be displayed.\n   */\n  @Input() componentTitle: string;\n  /**\n   * @ignore\n   */\n  @Input() disableRoutedNavigation = false;\n\n  examples: ComponentExampleDirective[] = [];\n\n  tab$: Observable<'overview' | 'examples' | 'api'>;\n  isOverview$: Observable<boolean>;\n  isExamples$: Observable<boolean>;\n  isApi$: Observable<boolean>;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges() {\n    this.tab$ = this.disableRoutedNavigation ? of('overview') : this.route.queryParams.pipe(map(p => p.tab || 'overview'));\n    this.updateIsObservables();\n  }\n\n  /**\n   * @ignore\n   */\n  registerExample(example: ComponentExampleDirective) {\n    this.examples.push(example);\n  }\n\n  /**\n   * @ignore\n   */\n  select(tab: 'overview' | 'examples' | 'api') {\n    if (this.disableRoutedNavigation) {\n      this.tab$ = of(tab);\n      this.updateIsObservables();\n    } else {\n      this.router.navigate(['.'], {\n        queryParamsHandling: 'merge',\n        queryParams: {\n          tab\n        },\n        relativeTo: this.route,\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private updateIsObservables() {\n    this.isOverview$ = this.tab$.pipe(map(v => v === 'overview'));\n    this.isExamples$ = this.tab$.pipe(map(v => v === 'examples'));\n    this.isApi$ = this.tab$.pipe(map(v => v === 'api'));\n  }\n}\n\n@Directive({\n  selector: '[docsAnchorContainer]'\n})\nexport class AnchorContainerDirective implements AfterViewChecked {\n  @Input() docsAnchorContainer: string;\n  private anchors: AnchorDirective[] = [];\n  private currentAnchor: string;\n\n  constructor(private elementRef: ElementRef) {}\n\n  registerAnchor(anchor: AnchorDirective) {\n    this.anchors.push(anchor);\n  }\n\n  ngAfterViewChecked() {\n    if (this.currentAnchor === this.docsAnchorContainer) {\n      return;\n    }\n\n    this.currentAnchor = this.docsAnchorContainer;\n    const element = this.elementRef.nativeElement as HTMLElement;\n    const anchor = (this.anchors.find(a => a.docsAnchor === this.docsAnchorContainer).elementRef.nativeElement) as HTMLElement;\n\n    element.scrollTop = anchor.offsetTop - element.offsetTop - 15;\n  }\n}\n\n@Directive({\n  selector: '[docsAnchor]'\n})\nexport class AnchorDirective {\n  @Input() docsAnchor: string;\n\n  constructor(\n    private container: AnchorContainerDirective,\n    public elementRef: ElementRef\n  ) {\n    this.container.registerAnchor(this);\n  }\n}\n\n@Directive({\n  selector: '[docsComponentExample]'\n})\nexport class ComponentExampleDirective {\n  @Input() docsComponentExample: string;\n\n  constructor(\n    private documentation: ComponentDocumentationComponent,\n    public template: TemplateRef<any>\n  ) {\n    this.documentation.registerExample(this);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/variables'\n\n\\:host\n  height: 100%\n  overflow: hidden\n  display: flex\n  flex-direction: column\n\n.header\n  flex: 0 0 auto\n  display: flex\n  flex-direction: row\n  align-items: center\n  border-bottom: 1px solid grey\n  box-shadow: 2px 0px 2px 1px lightgrey\n  padding: 0 15px\n\n.content\n  flex: 1 1\n  padding: 15px\n  overflow: auto\n\n\nh2\n  margin-top: 50px\n  border-bottom: 1px solid $color-light-grey\n\nol\n  list-style: none\n  margin: 0 0 0 30px\n  padding: 0\n\nli\n  display: inline-block\n  margin: 0\n  padding: 5px 10px\n  transition: color 0.2s\n  cursor: pointer\n\n  &:hover\n    color: $color-three\n\n  &.active\n    color: $color-four\n",
                    "styleUrl": "./component-documentation.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"header\">\n  <h1>{{componentTitle}}</h1>\n\n  <ol>\n    <li [class.active]=\"isOverview$ | async\" (click)=\"select('overview')\">Overview</li>\n    <li [class.active]=\"isExamples$ | async\" (click)=\"select('examples')\">Examples</li>\n    <li [class.active]=\"isApi$ | async\" (click)=\"select('api')\">API</li>\n  </ol>\n</div>\n\n<div class=\"content\" [docsAnchorContainer]=\"tab$ | async\">\n  <docs-component-description\n    docsAnchor=\"overview\"\n    [componentId]=\"componentId\"\n    [componentType]=\"componentType\"\n  ></docs-component-description>\n\n  <h2 docsAnchor=\"examples\">Examples</h2>\n  <ng-template ngFor [ngForOf]=\"examples\" let-example>\n    <docs-component-example [example]=\"example\"></docs-component-example>\n  </ng-template>\n\n  <h2 docsAnchor=\"api\">API</h2>\n  \n  <docs-component-api\n    [componentId]=\"componentId\"\n    [componentType]=\"componentType\"\n  ></docs-component-api>\n  \n</div>\n\n"
        },
        {
            "name": "ComponentExampleComponent",
            "id": "component-ComponentExampleComponent-54b32cd708872ef859437697aba3ead5",
            "file": "projects/ng-documentation/src/lib/core/component-example/component-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-component-example",
            "styleUrls": [
                "./component-example.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./component-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "example",
                    "line": 10,
                    "type": "ComponentExampleDirective"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ComponentExampleDirective } from '../component-documentation/component-documentation.component';\n\n@Component({\n  selector: 'docs-component-example',\n  templateUrl: './component-example.component.html',\n  styleUrls: ['./component-example.component.sass']\n})\nexport class ComponentExampleComponent {\n  @Input() example: ComponentExampleDirective;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./component-example.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<h3>{{example.docsComponentExample}}</h3>\n\n<ng-container [ngTemplateOutlet]=\"example.template\"></ng-container>\n"
        },
        {
            "name": "CopyButtonComponent",
            "id": "component-CopyButtonComponent-fbcc2f6854437c791a208f060e94a484",
            "file": "projects/ng-documentation/src/lib/core/copy-button/copy-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-copy-button",
            "styleUrls": [
                "./copy-button.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./copy-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "element",
                    "line": 9,
                    "type": "HTMLElement"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "copied",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "copiedTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'docs-copy-button',\n  templateUrl: './copy-button.component.html',\n  styleUrls: ['./copy-button.component.sass']\n})\nexport class CopyButtonComponent {\n  @Input() element: HTMLElement;\n\n  copied = false;\n\n  private copiedTimeout: any;\n\n  /**\n   * @ignore\n   */\n  copy() {\n    this.copyToClipboard(this.element.innerText);\n    this.copied = true;\n    clearTimeout(this.copiedTimeout);\n    this.copiedTimeout = setTimeout(() => this.copied = false, 3000);\n  }\n\n  /**\n   * @ignore\n   */\n  private copyToClipboard(str: string) {\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  display: block\n\nbutton\n  border: none\n  box-shadow: none\n  background: transparent\n  height: auto\n  line-height: normal\n  color: grey\n  outline: none\n  padding: 0\n\n  &:hover\n    color: black",
                    "styleUrl": "./copy-button.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"copy\" (click)=\"copy()\">\n  <ng-container *ngIf=\"!copied\">copy</ng-container>\n  <ng-container *ngIf=\"copied\">copied!</ng-container>\n  <ng-template [ngIf]=\"!copied\">\n    <ng-template iwTooltip [horizontal]=\"true\">Copy this code sample</ng-template>\n  </ng-template>\n</button>\n\n"
        },
        {
            "name": "DefaultWelcomeComponent",
            "id": "component-DefaultWelcomeComponent-fb6df549c192c9062b3d33d0c142c6c5",
            "file": "projects/ng-documentation/src/lib/default-welcome/default-welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-default-welcome",
            "styleUrls": [
                "./default-welcome.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./default-welcome.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'docs-default-welcome',\n  templateUrl: './default-welcome.component.html',\n  styleUrls: ['./default-welcome.component.sass']\n})\nexport class DefaultWelcomeComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  display: block\n  padding: 15px\n",
                    "styleUrl": "./default-welcome.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Default Welcome Page</h1>\n\n<h2><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Documentation & Demo</h2>\n<p>This documentation is a combination of automated comment extraction from your code and of component examples.\n</p>\n\n<h2><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Navigation</h2>\n<p>Use the menu on the left to navigate throught components.</p>\n\n<h2><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Backed by Interfacewerk</h2>\n<p><a>Interfacewerk</a> is a digital innovation consultancy focussing on Software Design and User Experience.</p>\n"
        },
        {
            "name": "DocsComponent",
            "id": "component-DocsComponent-2dff64ec5ca2b659cc4d0627de3b77b6",
            "file": "projects/ng-documentation/src/lib/docs/docs.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-app",
            "styleUrls": [
                "./docs.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./docs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brandHeaderTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, TemplateRef, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'docs-app',\n  templateUrl: './docs.component.html',\n  styleUrls: ['./docs.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class DocsComponent {\n  brandHeaderTemplate: TemplateRef<any>;\n\n  constructor(\n    private route: ActivatedRoute\n  ) {\n  }\n\n  get search$(): Observable<string> {\n    return this.route.queryParams.pipe(map(p => p.search || ''));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/_variables'\n\ndocs-app\n  display: block\n  position: relative\n  width: 100vw\n  height: 100vh\n\n  $width_aside: 200px\n\n  a.brand-header\n    width: calc(100% - 30px)\n    display: block\n    margin: 0 15px\n    &, &:hover, &:focus\n      text-decoration: none\n    \n  aside\n    position: absolute\n    top: 0\n    left: 0\n    height: 100%\n    width: $width_aside\n    overflow: auto\n    background: white\n    color: black\n    padding: 15px 0px\n    border-right: 1px solid grey\n    box-shadow: 2px 0px 2px 1px lightgray\n\n  main\n    position: absolute\n    top: 0\n    left: $width_aside\n    height: 100%\n    right: 0\n    overflow: auto\n\n  ul\n    padding: 0\n    margin: 0\n\n    li\n      list-style: none\n      width: 100%\n      padding: 0\n\n      a\n        display: inline-block\n        width: 100%\n        line-height: 20px\n        text-decoration: none\n        padding: 10px 15px\n        color: black\n        font-size: 1.6rem\n        transition: all 0.2s\n\n        &:hover\n          color: $color-three\n          background: whitesmoke\n\n        &.active-link\n          color: $color-four\n          background: whitesmoke\n  \n  .extra-links li:first-child\n    margin-top: 30px\n    border-top: 1px solid $color-light-grey",
                    "styleUrl": "./docs.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "search$": {
                    "name": "search$",
                    "getSignature": {
                        "name": "search$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 20
                    }
                }
            },
            "templateData": "<aside>\n  <docs-menu>\n    <ng-content></ng-content>\n  </docs-menu>\n</aside>\n\n<main>\n  <router-outlet></router-outlet>\n</main>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-a0ed2a3a9bf6bc056edc34cd9b807d60",
            "file": "projects/ng-documentation/src/lib/features/home/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-home",
            "styleUrls": [
                "./home.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'docs-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.sass']\n})\nexport class HomeComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<p>\n  home works!\n</p>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-5515d3e7f311f2913e21a585951d5c31",
            "file": "projects/ng-documentation/src/lib/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-menu",
            "styleUrls": [
                "./menu.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pages$",
                    "type": "Observable<ComponentPages>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "setSearch",
                    "args": [
                        {
                            "name": "v",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DocsComponent } from '../docs/docs.component';\nimport { ComponentPages, COMPONENT_PAGES } from '../routes.token';\n\n@Component({\n  selector: 'docs-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.sass']\n})\nexport class MenuComponent {\n\n  get brandHeaderTemplate() {\n    return this.docs.brandHeaderTemplate;\n  }\n\n  get search$() {\n    return this.docs.search$;\n  }\n\n  pages$: Observable<ComponentPages>;\n\n  constructor(\n    @Inject(COMPONENT_PAGES) private componentPages: ComponentPages,\n    private docs: DocsComponent,\n    private router: Router\n  ) {\n    this.pages$ = combineLatest(of(this.componentPages), this.search$)\n      .pipe(map(([pages, search]) => {\n        const normalized = (search ||Â '').toLowerCase();\n        return pages.filter(p => p.title.toLowerCase().indexOf(normalized) > -1);\n      }));\n  }\n\n  setSearch(v: string) {\n    this.router.navigate([], {\n      queryParams: {\n        search: v\n      },\n      queryParamsHandling: 'merge'\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/variables'\n\n$search-color: $color-two\n\n.brand-area\n  padding: 13.5px 15px\n\n.search\n  height: 40px\n  line-height: 14px\n  font-size: 14px\n  padding: 13.5px 15px\n  width: 100%\n  border-radius: 0\n  color: $search-color\n  outline: none\n  border: none\n  border-top: $color-light-grey 1px solid\n  border-bottom: $color-light-grey 1px solid\n\n  &.no-result\n    border-color: $color-five\n    color: $color-five\n\n.search-helper\n  width: 100%\n  padding: 0 15px\n  line-height: 20px\n  height: 20px\n  background-color: $search-color\n  color: white\n  font-size: 1rem\n  transition: opacity 0.2s\n  opacity: 1\n\n  &.no-result\n    background-color: $color-five\n\n  &.hidden\n    opacity: 0\n\n\\:host\n  display: flex\n  height: 100%\n  overflow: hidden\n  flex-direction: column\n\n.links\n  flex: 1 1\n  overflow: auto\n\n.extra-links, .header\n  flex: 0 0 auto",
                    "styleUrl": "./menu.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "componentPages",
                        "type": "ComponentPages"
                    },
                    {
                        "name": "docs",
                        "type": "DocsComponent"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "componentPages",
                        "type": "ComponentPages",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "docs",
                        "type": "DocsComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "brandHeaderTemplate": {
                    "name": "brandHeaderTemplate",
                    "getSignature": {
                        "name": "brandHeaderTemplate",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "search$": {
                    "name": "search$",
                    "getSignature": {
                        "name": "search$",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "templateData": "<div class=\"header\">\n  <div class=\"brand-area\">\n    <ng-container [ngTemplateOutlet]=\"brandHeaderTemplate\"></ng-container>\n  </div>\n    \n  <ul class=\"links\">\n    <li><a routerLink=\"/\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">Get started</a></li>\n  </ul>\n  <input type=\"text\"\n    class=\"search\"\n    [class.active]=\"search$ | async\"\n    [class.no-result]=\"(pages$ | async).length === 0\"\n    [ngModel]=\"search$ | async\"\n    (ngModelChange)=\"setSearch($event)\"\n    placeholder=\"Search for a component\"\n    autofocus\n    autocomplete=\"off\"\n  />\n  <div class=\"search-helper\"\n    [class.hidden]=\"!(search$ | async)\"\n    [class.no-result]=\"(pages$ | async).length === 0\">\n    <ng-container *ngIf=\"search$ | async\">\n      {{(pages$ | async).length}} <ng-container *ngIf=\"(pages$ | async).length > 1\">results</ng-container><ng-container *ngIf=\"(pages$ | async).length === 1\">result</ng-container> found\n    </ng-container>\n  </div>\n</div>\n<ul class=\"links\">\n  <ng-container *ngIf=\"pages$ | async as pages; else noResults\">\n    <li *ngFor=\"let page of pages\">\n      <a\n        [routerLink]=\"page.path\"\n        routerLinkActive=\"active-link\"\n      >{{page.title}}</a>\n    </li>\n  </ng-container>\n</ul>\n<ul class=\"extra-links\">\n  <ng-content></ng-content>\n</ul>\n\n<ng-template #noResults>\n  No result for this search!\n</ng-template>"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-9d8ea0492d4524eb529c287bf667aa17",
            "file": "projects/ng-documentation/src/lib/core/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-tabs",
            "styleUrls": [
                "./tabs.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Directive, OnDestroy, TemplateRef, Input } from '@angular/core';\n\n@Component({\n  selector: 'docs-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.sass']\n})\nexport class TabsComponent {\n  selectedTemplate: TemplateRef<any>;\n\n  tabs: { label: string, template: TemplateRef<any> }[] = [];\n}\n\n@Directive({\n  selector: '[docsTab]'\n})\nexport class TabDirective implements OnInit, OnDestroy {\n  @Input() docsTab: string;\n\n  constructor(private tabs: TabsComponent, private template: TemplateRef<any>) {}\n\n  ngOnInit() {\n    this.tabs.tabs.push({\n      label: this.docsTab,\n      template: this.template\n    });\n\n    if (!this.tabs.selectedTemplate) {\n      this.tabs.selectedTemplate = this.template;\n    }\n  }\n\n  ngOnDestroy() {\n    this.tabs.tabs = this.tabs.tabs.filter(t => t.template !== this.template);\n\n    if (this.tabs.selectedTemplate === this.template && this.tabs.tabs.length > 0) {\n      this.tabs.selectedTemplate = this.tabs.tabs[0].template;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/variables'\n\n\\:host\n  display: flex\n  flex-direction: column\n  height: 300px\n  overflow: hidden\n  border: $color-light-grey 1px solid\n\nol\n  margin: 0\n  padding: 0\n\nli\n  list-style: none\n  display: inline-block\n  cursor: pointer\n  padding: 0\n  margin: 0\n\n.content\n  flex: 1 1\n  overflow: auto\n\n// implemented to display code\n\\:host\n  margin-top: 20px\n\n  .content\n    background-color: whitesmoke\n  pre\n    margin-top: 0\n  li\n    padding: 0 15px\n    line-height: 40px\n    height: 40px\n    border-bottom: 2px solid transparent\n    transition: border-bottom 0.2s\n\n    &:hover:not(.active)\n      border-bottom-color: $color-light-grey\n      \n    &.active\n      color: $color-four\n      border-bottom-color: $color-four\n",
                    "styleUrl": "./tabs.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<ol>\n  <li *ngFor=\"let tab of tabs\"\n    (click)=\"selectedTemplate = tab.template\"\n    [class.active]=\"tab.template === selectedTemplate\"\n  >{{tab.label}}</li>\n</ol>\n\n<div class=\"content\">\n  <ng-container *ngTemplateOutlet=\"selectedTemplate\"></ng-container>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "CodeSampleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CodeSamplePipe"
                        },
                        {
                            "name": "ComponentDescriptionPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CodeSamplePipe"
                        },
                        {
                            "name": "ComponentDescriptionPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AnchorContainerDirective"
                        },
                        {
                            "name": "AnchorDirective"
                        },
                        {
                            "name": "BrandHeaderDirective"
                        },
                        {
                            "name": "CodeComponent"
                        },
                        {
                            "name": "CodeLineComponent"
                        },
                        {
                            "name": "ComponentApiComponent"
                        },
                        {
                            "name": "ComponentDescriptionComponent"
                        },
                        {
                            "name": "ComponentDocumentationComponent"
                        },
                        {
                            "name": "ComponentExampleComponent"
                        },
                        {
                            "name": "ComponentExampleDirective"
                        },
                        {
                            "name": "CopyButtonComponent"
                        },
                        {
                            "name": "TabDirective"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CodeSampleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AnchorContainerDirective"
                        },
                        {
                            "name": "AnchorDirective"
                        },
                        {
                            "name": "BrandHeaderDirective"
                        },
                        {
                            "name": "CodeComponent"
                        },
                        {
                            "name": "CodeLineComponent"
                        },
                        {
                            "name": "CodeSampleModule"
                        },
                        {
                            "name": "ComponentApiComponent"
                        },
                        {
                            "name": "ComponentDescriptionComponent"
                        },
                        {
                            "name": "ComponentDocumentationComponent"
                        },
                        {
                            "name": "ComponentExampleComponent"
                        },
                        {
                            "name": "ComponentExampleDirective"
                        },
                        {
                            "name": "TabDirective"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultWelcomeComponent"
                        },
                        {
                            "name": "DocsComponent"
                        },
                        {
                            "name": "MenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "DocsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "COMPONENT_PAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-documentation/src/lib/routes.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ComponentPages>('COMPONENT_PAGES')"
            },
            {
                "name": "DOCUMENTATION_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-documentation/src/lib/documentation.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<string>('DOCUMENTATION_PATH')"
            }
        ],
        "functions": [
            {
                "name": "sortByName",
                "file": "projects/ng-documentation/src/lib/core/component-api/component-api.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ComponentPages",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<>",
                "file": "projects/ng-documentation/src/lib/routes.token.ts",
                "description": "",
                "kind": 161
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-documentation/src/lib/routes.token.ts": [
                {
                    "name": "COMPONENT_PAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-documentation/src/lib/routes.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ComponentPages>('COMPONENT_PAGES')"
                }
            ],
            "projects/ng-documentation/src/lib/documentation.token.ts": [
                {
                    "name": "DOCUMENTATION_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-documentation/src/lib/documentation.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('DOCUMENTATION_PATH')"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ng-documentation/src/lib/core/component-api/component-api.component.ts": [
                {
                    "name": "sortByName",
                    "file": "projects/ng-documentation/src/lib/core/component-api/component-api.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ng-documentation/src/lib/routes.token.ts": [
                {
                    "name": "ComponentPages",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<>",
                    "file": "projects/ng-documentation/src/lib/routes.token.ts",
                    "description": "",
                    "kind": 161
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ng-documentation/src/lib/core/code-line/code-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeLineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/code-sample/code-sample.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CodeSamplePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/code-sample/code-sample.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ComponentDescriptionPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/code/code.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-api/component-api.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentApiComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-api/component-api.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "sortByName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-description/component-description.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentDocumentationComponent",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AnchorContainerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AnchorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-documentation/component-documentation.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ComponentExampleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/component-example/component-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/copy-button/copy-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CopyButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/directives/brand-header.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BrandHeaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/documentation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DocumentationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/documentation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentDocumentation",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/documentation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Documentation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/documentation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputType",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/documentation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MethodType",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/documentation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OutputType",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/core/tabs/tabs.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/default-welcome/default-welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultWelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/docs/docs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/documentation.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCUMENTATION_PATH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/features/home/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/routes.token.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/routes.token.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentPageMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-documentation/src/lib/routes.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENT_PAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}